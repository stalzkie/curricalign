"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/report/page",{

/***/ "(app-pages-browser)/./src/components/report/useOrchestrator.ts":
/*!**************************************************!*\
  !*** ./src/components/report/useOrchestrator.ts ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useOrchestrator: () => (/* binding */ useOrchestrator)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./src/components/report/constants.ts\");\n// src/components/report/useOrchestrator.ts\n/* __next_internal_client_entry_do_not_use__ useOrchestrator auto */ \n\nfunction sleep(ms) {\n    return new Promise((r)=>setTimeout(r, ms));\n}\nfunction toAbsoluteUrl(url) {\n    try {\n        return new URL(url).toString();\n    } catch (e) {\n        var _API_BASE_replace;\n        const base = (_API_BASE_replace = _constants__WEBPACK_IMPORTED_MODULE_1__.API_BASE === null || _constants__WEBPACK_IMPORTED_MODULE_1__.API_BASE === void 0 ? void 0 : _constants__WEBPACK_IMPORTED_MODULE_1__.API_BASE.replace(/\\/+$/, '')) !== null && _API_BASE_replace !== void 0 ? _API_BASE_replace : '';\n        const path = url.startsWith('/') ? url : \"/\".concat(url);\n        return \"\".concat(base).concat(path);\n    }\n}\n/** Probe URL until it responds OK. Tries HEAD, falls back to GET if needed. */ async function waitUntilReachable(url) {\n    let tries = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10, delayMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 500;\n    const abs = toAbsoluteUrl(url);\n    for(let i = 0; i < tries; i++){\n        const bust = \"_t=\".concat(Date.now(), \"-\").concat(i);\n        const sep = abs.includes('?') ? '&' : '?';\n        const probeUrl = \"\".concat(abs).concat(sep).concat(bust);\n        try {\n            let res = await fetch(probeUrl, {\n                method: 'HEAD',\n                cache: 'no-store'\n            });\n            if (res.ok) return true;\n            if (res.status === 405 || res.status === 501) {\n                res = await fetch(probeUrl, {\n                    method: 'GET',\n                    cache: 'no-store'\n                });\n                if (res.ok) return true;\n            }\n        } catch (e) {\n        // ignore and retry\n        }\n        await sleep(delayMs);\n    }\n    return false;\n}\n/** Download a URL as a file without page navigation. */ async function downloadUrlAsFile(url, filename) {\n    const abs = toAbsoluteUrl(url);\n    const bust = abs.includes('?') ? '&' : '?';\n    const res = await fetch(\"\".concat(abs).concat(bust, \"_dl=\").concat(Date.now()), {\n        cache: 'no-store'\n    });\n    if (!res.ok) throw new Error(\"Download failed: \".concat(res.status));\n    const blob = await res.blob();\n    const objectUrl = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = objectUrl;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n    URL.revokeObjectURL(objectUrl);\n}\nfunction useOrchestrator() {\n    const [steps, setSteps] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_constants__WEBPACK_IMPORTED_MODULE_1__.INITIAL_STEPS);\n    const [isProcessing, setIsProcessing] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isComplete, setIsComplete] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [reportUrl, setReportUrl] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [jobId, setJobId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // OPTIONAL: preview what scan-pdf parsed\n    const [parsedRows, setParsedRows] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const esRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const cancelledRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const openedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const downloadStartedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const closeStream = ()=>{\n        try {\n            var _esRef_current;\n            (_esRef_current = esRef.current) === null || _esRef_current === void 0 ? void 0 : _esRef_current.close();\n        } catch (e) {}\n        esRef.current = null;\n        openedRef.current = false;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useOrchestrator.useEffect\": ()=>{\n            return ({\n                \"useOrchestrator.useEffect\": ()=>closeStream()\n            })[\"useOrchestrator.useEffect\"];\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"useOrchestrator.useEffect\"], []);\n    // Auto-download when reportUrl arrives â€” WITHOUT navigating\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useOrchestrator.useEffect\": ()=>{\n            ({\n                \"useOrchestrator.useEffect\": async ()=>{\n                    if (!reportUrl || downloadStartedRef.current) return;\n                    downloadStartedRef.current = true;\n                    try {\n                        const reachable = await waitUntilReachable(reportUrl, 14, 500);\n                        if (!reachable) throw new Error('Report URL is not reachable yet');\n                        const suggested = \"alignment_report_\".concat(jobId !== null && jobId !== void 0 ? jobId : Date.now(), \".pdf\");\n                        await downloadUrlAsFile(reportUrl, suggested);\n                    } catch (err) {\n                        console.error('FRONTEND: Auto-download failed:', err);\n                        downloadStartedRef.current = false;\n                    }\n                }\n            })[\"useOrchestrator.useEffect\"]();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"useOrchestrator.useEffect\"], [\n        reportUrl,\n        jobId\n    ]);\n    const resetUI = ()=>{\n        setIsProcessing(true);\n        setIsComplete(false);\n        setReportUrl(null);\n        setParsedRows(null);\n        setSteps(_constants__WEBPACK_IMPORTED_MODULE_1__.INITIAL_STEPS.map((s)=>({\n                ...s,\n                status: 'pending'\n            })));\n        cancelledRef.current = false;\n        downloadStartedRef.current = false;\n    };\n    /**\n   * Upload the PDF to the backend scan endpoint.\n   * IMPORTANT: backend expects field name 'pdf' => async def scan_pdf_endpoint(pdf: UploadFile = File(...))\n   * Returns the JSON body so callers can read parsed_rows if desired.\n   */ async function uploadPdf(file) {\n        const form = new FormData();\n        form.append('pdf', file); // <-- FIX: must be 'pdf', not 'file'\n        const url = toAbsoluteUrl(_constants__WEBPACK_IMPORTED_MODULE_1__.PDF_UPLOAD_URL); // ensure absolute URL\n        const res = await fetch(url, {\n            method: 'POST',\n            body: form\n        });\n        const text = await res.text().catch(()=>'');\n        if (!res.ok) {\n            // Typical FastAPI error body shape: {\"detail\": \"...\"}\n            let detail = '';\n            try {\n                const j = JSON.parse(text);\n                detail = (j === null || j === void 0 ? void 0 : j.detail) || '';\n            } catch (e) {}\n            const explain = detail || text || \"Upload failed (\".concat(res.status, \")\");\n            throw new Error(\"scan-pdf error: \".concat(explain));\n        }\n        // Parse success body\n        let data = {};\n        try {\n            data = JSON.parse(text || '{}');\n        } catch (e) {\n            throw new Error('scan-pdf returned non-JSON response');\n        }\n        const rows = Array.isArray(data === null || data === void 0 ? void 0 : data.parsed_rows) ? data.parsed_rows : [];\n        setParsedRows(rows);\n        return data;\n    }\n    async function initOrchestratorJob() {\n        console.log('FRONTEND: Requesting new jobId from backend...');\n        const res = await fetch(toAbsoluteUrl(_constants__WEBPACK_IMPORTED_MODULE_1__.ORCHESTRATOR_INIT_URL), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({})\n        });\n        const txt = await res.text().catch(()=>'');\n        if (!res.ok) {\n            throw new Error(txt || 'Failed to initialize orchestrator job');\n        }\n        const data = txt ? JSON.parse(txt) : {};\n        if (data === null || data === void 0 ? void 0 : data.jobId) {\n            setJobId(String(data.jobId));\n            console.log('FRONTEND: Received jobId:', data.jobId);\n            return String(data.jobId);\n        }\n        throw new Error('No jobId received from init endpoint');\n    }\n    async function startOrchestratorPipeline(id, source) {\n        let flags = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        console.log('FRONTEND: Requesting backend to START pipeline for jobId:', id);\n        var _flags_scrapeEnabled, _flags_extractEnabled, _flags_retrainModels, _flags_generatePdf;\n        const payload = {\n            source,\n            scrapeEnabled: (_flags_scrapeEnabled = flags.scrapeEnabled) !== null && _flags_scrapeEnabled !== void 0 ? _flags_scrapeEnabled : true,\n            extractEnabled: (_flags_extractEnabled = flags.extractEnabled) !== null && _flags_extractEnabled !== void 0 ? _flags_extractEnabled : true,\n            retrainModels: (_flags_retrainModels = flags.retrainModels) !== null && _flags_retrainModels !== void 0 ? _flags_retrainModels : false,\n            generatePdf: (_flags_generatePdf = flags.generatePdf) !== null && _flags_generatePdf !== void 0 ? _flags_generatePdf : true\n        };\n        const res = await fetch(toAbsoluteUrl(\"\".concat(_constants__WEBPACK_IMPORTED_MODULE_1__.ORCHESTRATOR_START_PIPELINE_URL, \"/\").concat(encodeURIComponent(id))), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n        const txt = await res.text().catch(()=>'');\n        if (!res.ok) {\n            throw new Error(txt || \"Failed to start pipeline for jobId \".concat(id));\n        }\n        console.log('FRONTEND: Backend acknowledged pipeline start for jobId:', id);\n    }\n    /** Opens SSE. Resolves once opened OR after a short grace period so we can fallback to polling. */ function openEventStream(id) {\n        let graceMs = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1200;\n        return new Promise((resolve)=>{\n            if (!id) {\n                console.error('FRONTEND: Cannot open EventSource, jobId is null.');\n                resolve(); // let polling handle it\n                return;\n            }\n            closeStream();\n            const url = \"\".concat(toAbsoluteUrl(_constants__WEBPACK_IMPORTED_MODULE_1__.ORCHESTRATOR_EVENTS_URL), \"?jobId=\").concat(encodeURIComponent(id));\n            console.log('FRONTEND: Attempting to open EventSource to:', url);\n            const es = new EventSource(url);\n            esRef.current = es;\n            const graceTimer = setTimeout(()=>{\n                if (!openedRef.current) {\n                    console.warn('FRONTEND: SSE did not open within grace period; continuing with polling fallback.');\n                    resolve();\n                }\n            }, graceMs);\n            es.onopen = ()=>{\n                openedRef.current = true;\n                console.log('FRONTEND: SSE connection opened successfully for jobId:', id);\n                clearTimeout(graceTimer);\n                resolve();\n            };\n            es.onmessage = (evt)=>{\n                if (!evt.data) return;\n                try {\n                    const payload = JSON.parse(evt.data);\n                    // --- Handle explicit pipeline error events ---\n                    if ((payload === null || payload === void 0 ? void 0 : payload.type) === 'error') {\n                        console.error('PIPELINE ERROR:', payload.failed_at || payload.function, payload.error);\n                        const failedFn = payload.failed_at || payload.function;\n                        if (failedFn) {\n                            setSteps((prev)=>prev.map((s)=>s.fn === failedFn ? {\n                                        ...s,\n                                        status: 'error'\n                                    } : s));\n                        }\n                        setIsProcessing(false);\n                        closeStream();\n                        if (!cancelledRef.current && id) pollStatus(id);\n                        return;\n                    }\n                    if (payload.reportUrl) {\n                        setReportUrl(String(payload.reportUrl));\n                        console.log('FRONTEND: Report URL set:', payload.reportUrl);\n                    }\n                    const fn = payload.function;\n                    const st = payload.status;\n                    if (fn && st) {\n                        setSteps((prev)=>prev.map((s)=>{\n                                if (s.fn !== fn) return s;\n                                const map = {\n                                    started: 'in-progress',\n                                    completed: 'completed',\n                                    error: 'error'\n                                };\n                                var _map_st;\n                                return {\n                                    ...s,\n                                    status: (_map_st = map[st]) !== null && _map_st !== void 0 ? _map_st : s.status\n                                };\n                            }));\n                        if (fn === 'final_checking' && st === 'completed') {\n                            console.log('FRONTEND: Final Validation step completed.');\n                        }\n                    }\n                    if (fn === 'generate_pdf_report' && st === 'completed') {\n                        setIsComplete(true);\n                        setIsProcessing(false);\n                        console.log('FRONTEND: Process complete, closing SSE.');\n                        closeStream();\n                    }\n                    if (st === 'error') {\n                        setIsProcessing(false);\n                        console.log('FRONTEND: Process error detected.');\n                    }\n                } catch (e) {\n                // keep-alives or non-JSON; ignore\n                }\n            };\n            es.onerror = (error)=>{\n                console.error('FRONTEND: SSE Error occurred:', error);\n                if (!cancelledRef.current && id) {\n                    pollStatus(id);\n                }\n            };\n        });\n    }\n    async function pollStatus(id) {\n        if (cancelledRef.current || isComplete) return;\n        try {\n            const res = await fetch(\"\".concat(toAbsoluteUrl(_constants__WEBPACK_IMPORTED_MODULE_1__.ORCHESTRATOR_STATUS_URL), \"?jobId=\").concat(encodeURIComponent(id)), {\n                cache: 'no-store'\n            });\n            if (res.ok) {\n                const data = await res.json();\n                if (data.reportUrl) setReportUrl(data.reportUrl);\n                if (data.steps) {\n                    setSteps((prev)=>prev.map((s)=>{\n                            const st = data.steps[s.fn];\n                            const map = {\n                                pending: 'pending',\n                                in_progress: 'in-progress',\n                                completed: 'completed',\n                                error: 'error'\n                            };\n                            var _map_st;\n                            return st ? {\n                                ...s,\n                                status: (_map_st = map[st]) !== null && _map_st !== void 0 ? _map_st : s.status\n                            } : s;\n                        }));\n                    const done = data.steps['generate_pdf_report'] === 'completed';\n                    if (done) {\n                        setIsComplete(true);\n                        setIsProcessing(false);\n                        console.log('FRONTEND: Polling detected process complete.');\n                        return;\n                    }\n                    if (data.steps['final_checking'] === 'completed') {\n                        console.log('FRONTEND: Final Validation step completed (via polling).');\n                    }\n                }\n            }\n        } catch (pollError) {\n            console.error('FRONTEND: Error during polling:', pollError);\n        }\n        setTimeout(()=>pollStatus(id), 1000);\n    }\n    async function startFromPdf(file) {\n        resetUI();\n        try {\n            // 1) Upload & parse PDF first so courses are in DB before pipeline begins\n            console.log('FRONTEND: Starting PDF upload to scan endpoint...');\n            await uploadPdf(file);\n            console.log('FRONTEND: PDF upload complete.');\n            // 2) Init job and open stream\n            const currentJobId = await initOrchestratorJob();\n            console.log('FRONTEND: Opening SSE (with polling fallback)...');\n            await openEventStream(currentJobId);\n            // 3) Start the pipeline\n            await startOrchestratorPipeline(currentJobId, 'pdf', {\n                scrapeEnabled: true,\n                extractEnabled: true,\n                generatePdf: true,\n                retrainModels: false\n            });\n            // 4) Poll status as a fallback alongside SSE\n            pollStatus(currentJobId);\n        } catch (error) {\n            console.error('FRONTEND: Error in startFromPdf workflow:', error);\n            setIsProcessing(false);\n            closeStream();\n        }\n    }\n    async function startFromStored() {\n        resetUI();\n        try {\n            const currentJobId = await initOrchestratorJob();\n            console.log('FRONTEND: Opening SSE (with polling fallback)...');\n            await openEventStream(currentJobId);\n            await startOrchestratorPipeline(currentJobId, 'stored', {\n                scrapeEnabled: true,\n                extractEnabled: true,\n                generatePdf: true,\n                retrainModels: false\n            });\n            pollStatus(currentJobId);\n        } catch (error) {\n            console.error('FRONTEND: Error in startFromStored workflow:', error);\n            setIsProcessing(false);\n            closeStream();\n        }\n    }\n    async function cancel() {\n        console.log('FRONTEND: Cancel requested for jobId:', jobId);\n        cancelledRef.current = true;\n        closeStream();\n        setIsProcessing(false);\n        setSteps(_constants__WEBPACK_IMPORTED_MODULE_1__.INITIAL_STEPS.map((s)=>({\n                ...s,\n                status: 'pending'\n            })));\n        if (jobId) {\n            try {\n                const url = toAbsoluteUrl('/api/orchestrator/cancel');\n                const res = await fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        jobId\n                    })\n                });\n                if (!res.ok) {\n                    const txt = await res.text().catch(()=>'');\n                    throw new Error(txt || 'Cancel request failed');\n                }\n                console.log('FRONTEND: Cancel request sent to backend.');\n            } catch (cancelError) {\n                console.error('FRONTEND: Error sending cancel request:', cancelError);\n            }\n        }\n    }\n    return {\n        steps,\n        isProcessing,\n        isComplete,\n        reportUrl,\n        jobId,\n        parsedRows,\n        startFromPdf,\n        startFromStored,\n        cancel\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/report/useOrchestrator.ts\n"));

/***/ })

});