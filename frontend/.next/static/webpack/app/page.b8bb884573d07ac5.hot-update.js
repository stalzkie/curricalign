"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/dataService.ts":
/*!********************************!*\
  !*** ./src/lib/dataService.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchCourseWarnings: () => (/* binding */ fetchCourseWarnings),\n/* harmony export */   fetchInDemandJobs: () => (/* binding */ fetchInDemandJobs),\n/* harmony export */   fetchKPIData: () => (/* binding */ fetchKPIData),\n/* harmony export */   fetchMissingSkills: () => (/* binding */ fetchMissingSkills),\n/* harmony export */   fetchMostInDemandSkills: () => (/* binding */ fetchMostInDemandSkills),\n/* harmony export */   fetchTopMatchingCourses: () => (/* binding */ fetchTopMatchingCourses)\n/* harmony export */ });\n// === TYPES ===\nconst BASE_URL = \"/api/dashboard\";\n// === 1. Most In-Demand Skills ===\nasync function fetchMostInDemandSkills() {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/skills\"));\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"API error \".concat(response.status, \": \").concat(errorText));\n        }\n        const rawSkills = await response.json();\n        return rawSkills.filter((s)=>s.name && s.name.trim() !== \"\").sort((a, b)=>b.demand - a.demand);\n    } catch (error) {\n        console.error(\"❌ Failed to fetch in-demand skills:\", error);\n        return [];\n    }\n}\n// === 2. Top Matching Courses ===\nasync function fetchTopMatchingCourses() {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/top-courses\"));\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"API error \".concat(response.status, \": \").concat(errorText));\n        }\n        const data = await response.json();\n        return Array.isArray(data) ? data.map((item)=>({\n                courseName: item.courseName || \"Unknown Course\",\n                courseCode: item.courseCode || \"N/A\",\n                matchPercentage: item.matchPercentage || 0\n            })) : [];\n    } catch (error) {\n        console.error(\"❌ Failed to fetch top courses:\", error);\n        return [];\n    }\n}\n// === 3. In-Demand Job Titles (Top 10) ===\nasync function fetchInDemandJobs() {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/jobs\"));\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"API error \".concat(response.status, \": \").concat(errorText));\n        }\n        const data = await response.json();\n        return Array.isArray(data) ? data.filter((item)=>item.title && item.title.trim() !== \"\").sort((a, b)=>b.demand - a.demand).slice(0, 10).map((item)=>({\n                title: item.title,\n                demand: item.demand\n            })) : [];\n    } catch (error) {\n        console.error(\"❌ Failed to fetch in-demand jobs:\", error);\n        return [];\n    }\n}\n// === 4. Missing Skills ===\nasync function fetchMissingSkills() {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/missing-skills\"));\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"API error \".concat(response.status, \": \").concat(errorText));\n        }\n        const rawSkills = await response.json();\n        const uniqueSet = new Set();\n        for (const entry of rawSkills){\n            if (typeof entry === \"string\") {\n                const skills = entry.split(\",\").map((s)=>s.trim().toLowerCase()).filter(Boolean);\n                for (const skill of skills){\n                    uniqueSet.add(skill);\n                }\n            }\n        }\n        return Array.from(uniqueSet).sort();\n    } catch (error) {\n        console.error(\"❌ Failed to fetch missing skills:\", error);\n        return [];\n    }\n}\n// === 5. Course Warnings ===\nasync function fetchCourseWarnings() {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/warnings\"));\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"API error \".concat(response.status, \": \").concat(errorText));\n        }\n        const data = await response.json();\n        return Array.isArray(data) ? data.map((item)=>({\n                courseName: item.courseName || \"Unknown Course\",\n                courseCode: item.courseCode || \"N/A\",\n                matchPercentage: item.matchPercentage || 0\n            })) : [];\n    } catch (error) {\n        console.error(\"❌ Failed to fetch course warnings:\", error);\n        return [];\n    }\n}\n// === 6. KPI Data ===\nasync function fetchKPIData() {\n    try {\n        const response = await fetch(\"\".concat(BASE_URL, \"/kpi\"));\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"API error \".concat(response.status, \": \").concat(errorText));\n        }\n        const data = await response.json();\n        return {\n            averageAlignmentScore: data.averageAlignmentScore || 0,\n            totalSubjectsAnalyzed: data.totalSubjectsAnalyzed || 0,\n            totalJobPostsAnalyzed: data.totalJobPostsAnalyzed || 0,\n            skillsExtracted: data.skillsExtracted || 0\n        };\n    } catch (error) {\n        console.error(\"❌ FastAPI KPI fetch failed:\", error);\n        return {\n            averageAlignmentScore: 0,\n            totalSubjectsAnalyzed: 0,\n            totalJobPostsAnalyzed: 0,\n            skillsExtracted: 0\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvZGF0YVNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsZ0JBQWdCO0FBd0JoQixNQUFNQSxXQUFXO0FBRWpCLG1DQUFtQztBQUM1QixlQUFlQztJQUNwQixJQUFJO1FBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLEdBQVksT0FBVEgsVUFBUztRQUN6QyxJQUFJLENBQUNFLFNBQVNFLEVBQUUsRUFBRTtZQUNoQixNQUFNQyxZQUFZLE1BQU1ILFNBQVNJLElBQUk7WUFDckMsTUFBTSxJQUFJQyxNQUFNLGFBQWlDRixPQUFwQkgsU0FBU00sTUFBTSxFQUFDLE1BQWMsT0FBVkg7UUFDbkQ7UUFFQSxNQUFNSSxZQUFxQixNQUFNUCxTQUFTUSxJQUFJO1FBRTlDLE9BQU9ELFVBQ0pFLE1BQU0sQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxJQUFJLElBQUlELEVBQUVDLElBQUksQ0FBQ0MsSUFBSSxPQUFPLElBQzFDQyxJQUFJLENBQUMsQ0FBQ0MsR0FBR0MsSUFBTUEsRUFBRUMsTUFBTSxHQUFHRixFQUFFRSxNQUFNO0lBQ3ZDLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsdUNBQXVDQTtRQUNyRCxPQUFPLEVBQUU7SUFDWDtBQUNGO0FBRUEsa0NBQWtDO0FBQzNCLGVBQWVFO0lBQ3BCLElBQUk7UUFDRixNQUFNbkIsV0FBVyxNQUFNQyxNQUFNLEdBQVksT0FBVEgsVUFBUztRQUN6QyxJQUFJLENBQUNFLFNBQVNFLEVBQUUsRUFBRTtZQUNoQixNQUFNQyxZQUFZLE1BQU1ILFNBQVNJLElBQUk7WUFDckMsTUFBTSxJQUFJQyxNQUFNLGFBQWlDRixPQUFwQkgsU0FBU00sTUFBTSxFQUFDLE1BQWMsT0FBVkg7UUFDbkQ7UUFFQSxNQUFNaUIsT0FBTyxNQUFNcEIsU0FBU1EsSUFBSTtRQUNoQyxPQUFPYSxNQUFNQyxPQUFPLENBQUNGLFFBQ2pCQSxLQUFLRyxHQUFHLENBQUMsQ0FBQ0Ms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QUFJO2dCQUMvQkMsaUJBQWlCSCxLQUFLRyxlQUFlLElBQUk7WUFDM0MsTUFDQSxFQUFFO0lBQ1IsRUFBRSxPQUFPVixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3BELE9BQU8sRUFBRTtJQUNYO0FBQ0Y7QUFFQSxzQkFBc0I7QUFDZixlQUFlMEI7SUFDcEIsSUFBSTtRQUNGLE1BQU0zQyxXQUFXLE1BQU1DLE1BQU0sR0FBWSxPQUFUSCxVQUFTO1FBQ3pDLElBQUksQ0FBQ0UsU0FBU0UsRUFBRSxFQUFFO1lBQ2hCLE1BQU1DLFlBQVksTUFBTUgsU0FBU0ksSUFBSTtZQUNyQyxNQUFNLElBQUlDLE1BQU0sYUFBaUNGLE9BQXBCSCxTQUFTTSxNQUFNLEVBQUMsTUFBYyxPQUFWSDtRQUNuRDtRQUVBLE1BQU1pQixPQUFPLE1BQU1wQixTQUFTUSxJQUFJO1FBQ2hDLE9BQU87WUFDTG9DLHVCQUF1QnhCLEtBQUt3QixxQkFBcUIsSUFBSTtZQUNyREMsdUJBQXVCekIsS0FBS3lCLHFCQUFxQixJQUFJO1lBQ3JEQyx1QkFBdUIxQixLQUFLMEIscUJBQXFCLElBQUk7WUFDckRDLGlCQUFpQjNCLEtBQUsyQixlQUFlLElBQUk7UUFDM0M7SUFDRixFQUFFLE9BQU85QixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLE9BQU87WUFDTDJCLHVCQUF1QjtZQUN2QkMsdUJBQXVCO1lBQ3ZCQyx1QkFBdUI7WUFDdkJDLGlCQUFpQjtRQUNuQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVklDVFVTXFxjdXJyaWNhbGlnbi10aGVzaXNcXGZyb250ZW5kXFxzcmNcXGxpYlxcZGF0YVNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09IFRZUEVTID09PVxyXG5leHBvcnQgaW50ZXJmYWNlIFNraWxsIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZGVtYW5kOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ291cnNlIHtcclxuICBjb3Vyc2VOYW1lOiBzdHJpbmc7XHJcbiAgY291cnNlQ29kZTogc3RyaW5nO1xyXG4gIG1hdGNoUGVyY2VudGFnZTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEpvYiB7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICBkZW1hbmQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBLUElEYXRhIHtcclxuICBhdmVyYWdlQWxpZ25tZW50U2NvcmU6IG51bWJlcjtcclxuICB0b3RhbFN1YmplY3RzQW5hbHl6ZWQ6IG51bWJlcjtcclxuICB0b3RhbEpvYlBvc3RzQW5hbHl6ZWQ6IG51bWJlcjtcclxuICBza2lsbHNFeHRyYWN0ZWQ6IG51bWJlcjtcclxufVxyXG5cclxuY29uc3QgQkFTRV9VUkwgPSBcIi9hcGkvZGFzaGJvYXJkXCI7XHJcblxyXG4vLyA9PT0gMS4gTW9zdCBJbi1EZW1hbmQgU2tpbGxzID09PVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hNb3N0SW5EZW1hbmRTa2lsbHMoKTogUHJvbWlzZTxTa2lsbFtdPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QkFTRV9VUkx9L3NraWxsc2ApO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQVBJIGVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtlcnJvclRleHR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmF3U2tpbGxzOiBTa2lsbFtdID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgIHJldHVybiByYXdTa2lsbHNcclxuICAgICAgLmZpbHRlcigocykgPT4gcy5uYW1lICYmIHMubmFtZS50cmltKCkgIT09IFwiXCIpXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmRlbWFuZCAtIGEuZGVtYW5kKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIuKdjCBGYWlsZWQgdG8gZmV0Y2ggaW4tZGVtYW5kIHNraWxsczpcIiwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuLy8gPT09IDIuIFRvcCBNYXRjaGluZyBDb3Vyc2VzID09PVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hUb3BNYXRjaGluZ0NvdXJzZXMoKTogUHJvbWlzZTxDb3Vyc2VbXT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS90b3AtY291cnNlc2ApO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQVBJIGVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtlcnJvclRleHR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGRhdGEpXHJcbiAgICAgID8gZGF0YS5tYXAoKGl0ZW06IGFueSkgPT4gKHtcclxuICAgICAgICAgIGNvdXJzZU5hbWU6IGl0ZW0uY291cnNlTmFtZSB8fCBcIlVua25vd24gQ291cnNlXCIsXHJcbiAgICAgICAgICBjb3Vyc2VDb2RlOiBpdGVtLmNvdXJzZUNvZGUgfHwgXCJOL0FcIixcclxuICAgICAgICAgIG1hdGNoUGVyY2VudGFnZTogaXRlbS5tYXRjaFBlcmNlbnRhZ2UgfHwgMCxcclxuICAgICAgICB9KSlcclxuICAgICAgOiBbXTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIuKdjCBGYWlsZWQgdG8gZmV0Y2ggdG9wIGNvdXJzZXM6XCIsIGVycm9yKTtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcbn1cclxuXHJcbi8vID09PSAzLiBJbi1EZW1hbmQgSm9iIFRpdGxlcyAoVG9wIDEwKSA9PT1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoSW5EZW1hbmRKb2JzKCk6IFByb21pc2U8Sm9iW10+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vam9ic2ApO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQVBJIGVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtlcnJvclRleHR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShkYXRhKVxyXG4gICAgICA/IGRhdGFcclxuICAgICAgICAgIC5maWx0ZXIoKGl0ZW06IGFueSkgPT4gaXRlbS50aXRsZSAmJiBpdGVtLnRpdGxlLnRyaW0oKSAhPT0gXCJcIilcclxuICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmRlbWFuZCAtIGEuZGVtYW5kKVxyXG4gICAgICAgICAgLnNsaWNlKDAsIDEwKVxyXG4gICAgICAgICAgLm1hcCgoaXRlbTogYW55KSA9PiAoe1xyXG4gICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcclxuICAgICAgICAgICAgZGVtYW5kOiBpdGVtLmRlbWFuZCxcclxuICAgICAgICAgIH0pKVxyXG4gICAgICA6IFtdO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwi4p2MIEZhaWxlZCB0byBmZXRjaCBpbi1kZW1hbmQgam9iczpcIiwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuLy8gPT09IDQuIE1pc3NpbmcgU2tpbGxzID09PVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hNaXNzaW5nU2tpbGxzKCk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vbWlzc2luZy1za2lsbHNgKTtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSBlcnJvciAke3Jlc3BvbnNlLnN0YXR1c306ICR7ZXJyb3JUZXh0fWApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJhd1NraWxsczogc3RyaW5nW10gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgY29uc3QgdW5pcXVlU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XHJcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIHJhd1NraWxscykge1xyXG4gICAgICBpZiAodHlwZW9mIGVudHJ5ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgY29uc3Qgc2tpbGxzID0gZW50cnlcclxuICAgICAgICAgIC5zcGxpdChcIixcIilcclxuICAgICAgICAgIC5tYXAoKHMpID0+IHMudHJpbSgpLnRvTG93ZXJDYXNlKCkpXHJcbiAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2tpbGwgb2Ygc2tpbGxzKSB7XHJcbiAgICAgICAgICB1bmlxdWVTZXQuYWRkKHNraWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh1bmlxdWVTZXQpLnNvcnQoKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIuKdjCBGYWlsZWQgdG8gZmV0Y2ggbWlzc2luZyBza2lsbHM6XCIsIGVycm9yKTtcclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcbn1cclxuXHJcbi8vID09PSA1LiBDb3Vyc2UgV2FybmluZ3MgPT09XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaENvdXJzZVdhcm5pbmdzKCk6IFByb21pc2U8Q291cnNlW10+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH0vd2FybmluZ3NgKTtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSBlcnJvciAke3Jlc3BvbnNlLnN0YXR1c306ICR7ZXJyb3JUZXh0fWApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShkYXRhKVxyXG4gICAgICA/IGRhdGEubWFwKChpdGVtOiBhbnkpID0+ICh7XHJcbiAgICAgICAgICBjb3Vyc2VOYW1lOiBpdGVtLmNvdXJzZU5hbWUgfHwgXCJVbmtub3duIENvdXJzZVwiLFxyXG4gICAgICAgICAgY291cnNlQ29kZTogaXRlbS5jb3Vyc2VDb2RlIHx8IFwiTi9BXCIsXHJcbiAgICAgICAgICBtYXRjaFBlcmNlbnRhZ2U6IGl0ZW0ubWF0Y2hQZXJjZW50YWdlIHx8IDAsXHJcbiAgICAgICAgfSkpXHJcbiAgICAgIDogW107XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgRmFpbGVkIHRvIGZldGNoIGNvdXJzZSB3YXJuaW5nczpcIiwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuLy8gPT09IDYuIEtQSSBEYXRhID09PVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hLUElEYXRhKCk6IFByb21pc2U8S1BJRGF0YT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfS9rcGlgKTtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSBlcnJvciAke3Jlc3BvbnNlLnN0YXR1c306ICR7ZXJyb3JUZXh0fWApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhdmVyYWdlQWxpZ25tZW50U2NvcmU6IGRhdGEuYXZlcmFnZUFsaWdubWVudFNjb3JlIHx8IDAsXHJcbiAgICAgIHRvdGFsU3ViamVjdHNBbmFseXplZDogZGF0YS50b3RhbFN1YmplY3RzQW5hbHl6ZWQgfHwgMCxcclxuICAgICAgdG90YWxKb2JQb3N0c0FuYWx5emVkOiBkYXRhLnRvdGFsSm9iUG9zdHNBbmFseXplZCB8fCAwLFxyXG4gICAgICBza2lsbHNFeHRyYWN0ZWQ6IGRhdGEuc2tpbGxzRXh0cmFjdGVkIHx8IDAsXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwi4p2MIEZhc3RBUEkgS1BJIGZldGNoIGZhaWxlZDpcIiwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYXZlcmFnZUFsaWdubWVudFNjb3JlOiAwLFxyXG4gICAgICB0b3RhbFN1YmplY3RzQW5hbHl6ZWQ6IDAsXHJcbiAgICAgIHRvdGFsSm9iUG9zdHNBbmFseXplZDogMCxcclxuICAgICAgc2tpbGxzRXh0cmFjdGVkOiAwLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkJBU0VfVVJMIiwiZmV0Y2hNb3N0SW5EZW1hbmRTa2lsbHMiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJlcnJvclRleHQiLCJ0ZXh0IiwiRXJyb3IiLCJzdGF0dXMiLCJyYXdTa2lsbHMiLCJqc29uIiwiZmlsdGVyIiwicyIsIm5hbWUiLCJ0cmltIiwic29ydCIsImEiLCJiIiwiZGVtYW5kIiwiZXJyb3IiLCJjb25zb2xlIiwiZmV0Y2hUb3BNYXRjaGluZ0NvdXJzZXMiLCJkYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiaXRlbSIsImNvdXJzZU5hbWUiLCJjb3Vyc2VDb2RlIiwibWF0Y2hQZXJjZW50YWdlIiwiZmV0Y2hJbkRlbWFuZEpvYnMiLCJ0aXRsZSIsInNsaWNlIiwiZmV0Y2hNaXNzaW5nU2tpbGxzIiwidW5pcXVlU2V0IiwiU2V0IiwiZW50cnkiLCJza2lsbHMiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwiQm9vbGVhbiIsInNraWxsIiwiYWRkIiwiZnJvbSIsImZldGNoQ291cnNlV2FybmluZ3MiLCJmZXRjaEtQSURhdGEiLCJhdmVyYWdlQWxpZ25tZW50U2NvcmUiLCJ0b3RhbFN1YmplY3RzQW5hbHl6ZWQiLCJ0b3RhbEpvYlBvc3RzQW5hbHl6ZWQiLCJza2lsbHNFeHRyYWN0ZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/dataService.ts\n"));

/***/ })

});