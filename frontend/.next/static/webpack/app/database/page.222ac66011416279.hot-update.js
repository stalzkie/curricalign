"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/database/page",{

/***/ "(app-pages-browser)/./src/lib/databaseService.ts":
/*!************************************!*\
  !*** ./src/lib/databaseService.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchTableRows: () => (/* binding */ fetchTableRows),\n/* harmony export */   getDbRowsCached: () => (/* binding */ getDbRowsCached),\n/* harmony export */   getDbRowsFresh: () => (/* binding */ getDbRowsFresh),\n/* harmony export */   getTableLastChanged: () => (/* binding */ getTableLastChanged),\n/* harmony export */   invalidateDbCache: () => (/* binding */ invalidateDbCache),\n/* harmony export */   invalidateManyDbCaches: () => (/* binding */ invalidateManyDbCaches)\n/* harmony export */ });\n/* harmony import */ var _lib_supabaseClients__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabaseClients */ \"(app-pages-browser)/./src/lib/supabaseClients.ts\");\n/* harmony import */ var _dataCache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataCache */ \"(app-pages-browser)/./src/lib/dataCache.ts\");\n// src/lib/databaseService.ts\n\n\nconst CK = (table)=>\"db:\".concat(table);\n/** Utility: stringify any unknown error safely */ function toErrMessage(err) {\n    if (err instanceof Error) return err.message;\n    try {\n        return typeof err === \"string\" ? err : JSON.stringify(err !== null && err !== void 0 ? err : {});\n    } catch (e) {\n        return String(err);\n    }\n}\n/** Utility: ensure a clean, unique list of valid column names */ function sanitizeColumns(cols) {\n    const out = (cols !== null && cols !== void 0 ? cols : []).filter((c)=>typeof c === \"string\" && c.trim().length > 0).map((c)=>c.trim());\n    // remove duplicates while preserving order\n    return Array.from(new Set(out));\n}\n/** Fetch the change-version (updated_at) for a table from public.table_versions. */ async function getTableLastChanged(table) {\n    try {\n        const { data, error } = await _lib_supabaseClients__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"table_versions\").select(\"updated_at\").eq(\"table_name\", table).maybeSingle();\n        if (error) {\n            // Wrap as real Error so callers see the details\n            throw new Error(JSON.stringify({\n                where: \"getTableLastChanged\",\n                table,\n                message: error.message,\n                details: error.details,\n                hint: error.hint,\n                code: error.code\n            }, null, 2));\n        }\n        // If the row isn't there yet, treat as \"ancient\" so first fetch proceeds and seeds cache\n        const iso = (data === null || data === void 0 ? void 0 : data.updated_at) ? new Date(data.updated_at).toISOString() : new Date(0).toISOString();\n        return iso;\n    } catch (e) {\n        // Re-throw as an Error if something odd was thrown\n        throw new Error(toErrMessage(e));\n    }\n}\n/**\n * Fetch rows from a table with a projection (columns list).\n * Optionally supports range() for simple pagination.\n */ async function fetchTableRows(table, columns, opts) {\n    const cleaned = sanitizeColumns(columns);\n    const selectCols = cleaned.length ? cleaned.join(\",\") : \"*\";\n    // Helpful debug to see exactly what we’re querying\n    // (You can mute this later.)\n    // eslint-disable-next-line no-console\n    console.info(\"[databaseService] select \".concat(table, \" ->\"), selectCols);\n    try {\n        let q = _lib_supabaseClients__WEBPACK_IMPORTED_MODULE_0__.supabase.from(table).select(selectCols);\n        if (typeof (opts === null || opts === void 0 ? void 0 : opts.from) === \"number\" && typeof (opts === null || opts === void 0 ? void 0 : opts.to) === \"number\") {\n            q = q.range(opts.from, opts.to);\n        }\n        const { data, error } = await q;\n        if (error) {\n            // Wrap as Error so React overlay shows message instead of \"{}\"\n            throw new Error(JSON.stringify({\n                where: \"fetchTableRows\",\n                table,\n                select: selectCols,\n                message: error.message,\n                details: error.details,\n                hint: error.hint,\n                code: error.code\n            }, null, 2));\n        }\n        return data !== null && data !== void 0 ? data : [];\n    } catch (e) {\n        // Re-wrap unknown throws\n        throw new Error(toErrMessage(e));\n    }\n}\n/**\n * Version-gated cached fetch.\n * - Reads version from table_versions\n * - Returns cached rows if version unchanged\n * - Otherwise fetches rows and caches them with setCache\n *\n * @param table Supabase table name (e.g., \"course_alignment_scores_clean\")\n * @param columns Columns to select (keep this tight for performance)\n * @param opts Optional paging + stale behavior\n */ async function getDbRowsCached(table, columns, opts) {\n    const cacheKey = CK(table);\n    var _opts_allowStaleOnVersionError;\n    const allowStale = (_opts_allowStaleOnVersionError = opts === null || opts === void 0 ? void 0 : opts.allowStaleOnVersionError) !== null && _opts_allowStaleOnVersionError !== void 0 ? _opts_allowStaleOnVersionError : true;\n    // 1) Read current lastChanged from DB\n    let lastChanged = null;\n    try {\n        lastChanged = await getTableLastChanged(table);\n    } catch (err) {\n        // Version check failed (missing table_versions or RLS). Optionally serve stale.\n        if (!allowStale) throw new Error(toErrMessage(err));\n        const cachedRaw = safeReadCache(cacheKey);\n        if (cachedRaw) return cachedRaw.data;\n    // Fall through to a direct fetch so UI isn’t stuck\n    }\n    // 2) If we have cache and versions match → return cached\n    const cached = safeReadCache(cacheKey);\n    if (lastChanged && (cached === null || cached === void 0 ? void 0 : cached.lastChanged) === lastChanged) {\n        return cached.data;\n    }\n    // 3) Fetch fresh rows\n    const rows = await fetchTableRows(table, columns, {\n        from: opts === null || opts === void 0 ? void 0 : opts.from,\n        to: opts === null || opts === void 0 ? void 0 : opts.to\n    });\n    // 4) Save cache (also BroadcastChannel invalidation to other tabs via setCache)\n    const finalLastChanged = lastChanged !== null && lastChanged !== void 0 ? lastChanged : new Date().toISOString();\n    (0,_dataCache__WEBPACK_IMPORTED_MODULE_1__.setCache)(cacheKey, rows, finalLastChanged);\n    return rows;\n}\n/**\n * Always fetch fresh (ignores local cache) and then refresh the cache with the\n * latest version from table_versions if available.\n */ async function getDbRowsFresh(table, columns, opts) {\n    const cacheKey = CK(table);\n    const rows = await fetchTableRows(table, columns, {\n        from: opts === null || opts === void 0 ? void 0 : opts.from,\n        to: opts === null || opts === void 0 ? void 0 : opts.to\n    });\n    let lastChanged = new Date().toISOString();\n    try {\n        lastChanged = await getTableLastChanged(table);\n    } catch (e) {\n    // ignore version errors; still cache with now()\n    }\n    (0,_dataCache__WEBPACK_IMPORTED_MODULE_1__.setCache)(cacheKey, rows, lastChanged);\n    return rows;\n}\n/** Manually invalidate one table’s cache (and notify other tabs). */ function invalidateDbCache(table) {\n    (0,_dataCache__WEBPACK_IMPORTED_MODULE_1__.clearCache)(CK(table));\n}\n/** Bulk invalidate multiple tables. */ function invalidateManyDbCaches(tables) {\n    for (const t of tables)(0,_dataCache__WEBPACK_IMPORTED_MODULE_1__.clearCache)(CK(t));\n}\n/** Utility: safe read of your cache entry from localStorage (mirrors dataCache’s storage). */ function safeReadCache(key) {\n    try {\n        const raw = localStorage.getItem(key);\n        if (!raw) return null;\n        return JSON.parse(raw);\n    } catch (e) {\n        return null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/databaseService.ts\n"));

/***/ })

});