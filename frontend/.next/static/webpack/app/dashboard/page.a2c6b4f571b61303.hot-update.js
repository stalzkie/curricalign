"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/lib/dataCache.ts":
/*!******************************!*\
  !*** ./src/lib/dataCache.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   broadcastInvalidate: () => (/* binding */ broadcastInvalidate),\n/* harmony export */   clearCache: () => (/* binding */ clearCache),\n/* harmony export */   clearMany: () => (/* binding */ clearMany),\n/* harmony export */   formatLastChanged: () => (/* binding */ formatLastChanged),\n/* harmony export */   getLastChangedFromCache: () => (/* binding */ getLastChangedFromCache),\n/* harmony export */   getWithVersionCache: () => (/* binding */ getWithVersionCache),\n/* harmony export */   isCacheVersion: () => (/* binding */ isCacheVersion),\n/* harmony export */   peekCache: () => (/* binding */ peekCache),\n/* harmony export */   setCache: () => (/* binding */ setCache)\n/* harmony export */ });\n// src/lib/dataCache.ts\nconst DEFAULT_VERSION_URL = '/api/dashboard/version';\nconst LS_PREFIX = ''; // e.g., 'curricalign:' if you want namespacing\nconst DEFAULT_TTL_MS = 1000 * 60 * 60 * 24 * 7; // 7 days fallback if version is unreachable\n/* =============================================================================\n   BroadcastChannel for cross-tab invalidation\n============================================================================= */ const BC_NAME = 'dash-cache';\nconst hasWindow = \"object\" !== 'undefined';\nconst hasBC = hasWindow && 'BroadcastChannel' in window;\nconst bc = hasBC ? new BroadcastChannel(BC_NAME) : null;\nfunction broadcastInvalidate(cacheKey) {\n    bc === null || bc === void 0 ? void 0 : bc.postMessage({\n        type: 'invalidate',\n        cacheKey\n    });\n}\nif (bc) {\n    bc.addEventListener('message', (ev)=>{\n        const msg = ev === null || ev === void 0 ? void 0 : ev.data;\n        if ((msg === null || msg === void 0 ? void 0 : msg.type) === 'invalidate' && typeof (msg === null || msg === void 0 ? void 0 : msg.cacheKey) === 'string') {\n            try {\n                if (!hasWindow || !('localStorage' in window)) return;\n                localStorage.removeItem(msg.cacheKey);\n            } catch (e) {\n            /* ignore */ }\n        }\n    });\n}\n/* =============================================================================\n   localStorage helpers (SSR safe)\n============================================================================= */ function k(key) {\n    return LS_PREFIX + key;\n}\nfunction readCache(key) {\n    try {\n        if (!hasWindow || !('localStorage' in window)) return null;\n        const raw = localStorage.getItem(k(key));\n        if (!raw) return null;\n        return JSON.parse(raw);\n    } catch (e) {\n        return null;\n    }\n}\nfunction writeCache(key, entry) {\n    try {\n        if (!hasWindow || !('localStorage' in window)) return;\n        localStorage.setItem(k(key), JSON.stringify(entry));\n    } catch (e) {\n    /* ignore */ }\n}\nfunction clearCache(key) {\n    try {\n        if (!hasWindow || !('localStorage' in window)) return;\n        localStorage.removeItem(k(key));\n        broadcastInvalidate(k(key));\n    } catch (e) {\n    /* ignore */ }\n}\nfunction peekCache(key) {\n    return readCache(key);\n}\nfunction getLastChangedFromCache(key) {\n    const c = readCache(key);\n    var _c_lastChanged;\n    return (_c_lastChanged = c === null || c === void 0 ? void 0 : c.lastChanged) !== null && _c_lastChanged !== void 0 ? _c_lastChanged : null;\n}\nfunction formatLastChanged(iso) {\n    if (!iso) return '';\n    try {\n        return new Date(iso).toLocaleString();\n    } catch (e) {\n        return iso;\n    }\n}\n/* =============================================================================\n   HTTP helpers\n============================================================================= */ async function fetchJSON(url, init, signal) {\n    var _init_headers;\n    const res = await fetch(url, {\n        ...init,\n        signal,\n        cache: 'no-store',\n        headers: {\n            Accept: 'application/json',\n            ...(_init_headers = init === null || init === void 0 ? void 0 : init.headers) !== null && _init_headers !== void 0 ? _init_headers : {}\n        }\n    });\n    if (res.status === 304) {\n        var _res_headers_get;\n        // Callers treat 304 as \"use cached\"; we return a compatible shape\n        return {\n            data: undefined,\n            etag: (_res_headers_get = res.headers.get('ETag')) !== null && _res_headers_get !== void 0 ? _res_headers_get : undefined\n        };\n    }\n    if (!res.ok) {\n        const text = await res.text().catch(()=>'');\n        throw new Error(\"GET \".concat(url, \" failed: \").concat(res.status, \" \").concat(text));\n    }\n    var _res_headers_get1;\n    const etag = (_res_headers_get1 = res.headers.get('ETag')) !== null && _res_headers_get1 !== void 0 ? _res_headers_get1 : undefined;\n    const data = await res.json();\n    return {\n        data,\n        etag\n    };\n}\n/* =============================================================================\n   Core: version-gated cache fetch\n============================================================================= */ /**\n * Fetch dashboard data with version guarding:\n *  1) GET versionUrl (sends If-None-Match if we have an ETag)\n *     - if 304 and we have cache → return cache\n *     - if 200, compare lastChanged with cache\n *  2) If changed or no cache → GET dataUrl, cache with new version/etag\n *  3) If version fails, optionally serve bounded-stale cache by TTL\n */ async function getWithVersionCache(cacheKey, dataUrl) {\n    let versionUrl = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : DEFAULT_VERSION_URL, signal = arguments.length > 3 ? arguments[3] : void 0, opts = arguments.length > 4 ? arguments[4] : void 0;\n    var _opts_ttlMs;\n    const ttlMs = (_opts_ttlMs = opts === null || opts === void 0 ? void 0 : opts.ttlMs) !== null && _opts_ttlMs !== void 0 ? _opts_ttlMs : DEFAULT_TTL_MS;\n    const cached = readCache(cacheKey);\n    // 1) Check /version first (cheap), with ETag for 304 hits\n    const versionInit = {};\n    if (cached === null || cached === void 0 ? void 0 : cached.etag) {\n        versionInit.headers = {\n            ...versionInit.headers || {},\n            'If-None-Match': cached.etag\n        };\n    }\n    try {\n        const vRes = await fetch(versionUrl, {\n            ...versionInit,\n            signal,\n            cache: 'no-store',\n            headers: {\n                ...versionInit.headers || {},\n                Accept: 'application/json'\n            }\n        });\n        if (vRes.status === 304 && cached) {\n            return {\n                data: cached.data,\n                lastChanged: cached.lastChanged\n            };\n        }\n        if (!vRes.ok) {\n            throw new Error(\"Version check failed: \".concat(vRes.status));\n        }\n        var _vRes_headers_get;\n        const vEtag = (_vRes_headers_get = vRes.headers.get('ETag')) !== null && _vRes_headers_get !== void 0 ? _vRes_headers_get : undefined;\n        const { lastChanged } = await vRes.json();\n        // Version same → serve cache\n        if (cached && cached.lastChanged === lastChanged) {\n            return {\n                data: cached.data,\n                lastChanged: cached.lastChanged\n            };\n        }\n        // 2) Version changed or no cache → fetch fresh data\n        const { data } = await fetchJSON(dataUrl, undefined, signal);\n        const entry = {\n            data,\n            lastChanged,\n            cachedAt: new Date().toISOString(),\n            etag: vEtag\n        };\n        writeCache(cacheKey, entry);\n        return {\n            data,\n            lastChanged\n        };\n    } catch (err) {\n        // 3) If /version fails, serve bounded-stale cache (TTL) if allowed\n        if (cached && (opts === null || opts === void 0 ? void 0 : opts.allowStaleOnVersionError) !== false) {\n            const age = Date.now() - new Date(cached.cachedAt).getTime();\n            if (age <= ttlMs) {\n                return {\n                    data: cached.data,\n                    lastChanged: cached.lastChanged\n                };\n            }\n        }\n        // As a last resort, fetch data directly (no version guard)\n        if (!(signal === null || signal === void 0 ? void 0 : signal.aborted)) {\n            const { data } = await fetchJSON(dataUrl, undefined, signal);\n            const nowIso = new Date().toISOString();\n            var _cached_lastChanged;\n            const entry = {\n                data,\n                lastChanged: (_cached_lastChanged = cached === null || cached === void 0 ? void 0 : cached.lastChanged) !== null && _cached_lastChanged !== void 0 ? _cached_lastChanged : nowIso,\n                cachedAt: nowIso,\n                etag: cached === null || cached === void 0 ? void 0 : cached.etag\n            };\n            writeCache(cacheKey, entry);\n            return {\n                data,\n                lastChanged: entry.lastChanged\n            };\n        }\n        throw err;\n    }\n}\n/* =============================================================================\n   Convenience utilities\n============================================================================= */ /** Manually set cache (e.g., after optimistic updates). */ function setCache(cacheKey, data, lastChangedISO, etag) {\n    writeCache(cacheKey, {\n        data,\n        lastChanged: lastChangedISO,\n        cachedAt: new Date().toISOString(),\n        etag\n    });\n    // notify other tabs to drop their local copy so they re-read on next access\n    broadcastInvalidate(k(cacheKey));\n}\n/** Invalidate multiple keys at once. */ function clearMany(keys) {\n    for (const key of keys)clearCache(key);\n}\n/** True if a cached entry exists and matches a given lastChanged value. */ function isCacheVersion(cacheKey, lastChangedISO) {\n    const c = readCache(cacheKey);\n    return !!(c && c.lastChanged === lastChangedISO);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/dataCache.ts\n"));

/***/ })

});