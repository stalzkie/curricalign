"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_dataService_ts";
exports.ids = ["_rsc_src_lib_dataService_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/dataCache.ts":
/*!******************************!*\
  !*** ./src/lib/dataCache.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   broadcastInvalidate: () => (/* binding */ broadcastInvalidate),\n/* harmony export */   clearCache: () => (/* binding */ clearCache),\n/* harmony export */   clearMany: () => (/* binding */ clearMany),\n/* harmony export */   formatLastChanged: () => (/* binding */ formatLastChanged),\n/* harmony export */   getLastChangedFromCache: () => (/* binding */ getLastChangedFromCache),\n/* harmony export */   getWithVersionCache: () => (/* binding */ getWithVersionCache),\n/* harmony export */   isCacheVersion: () => (/* binding */ isCacheVersion),\n/* harmony export */   peekCache: () => (/* binding */ peekCache),\n/* harmony export */   setCache: () => (/* binding */ setCache)\n/* harmony export */ });\n// src/lib/dataCache.ts\nconst DEFAULT_VERSION_URL = '/api/dashboard/version';\nconst LS_PREFIX = ''; // e.g., 'curricalign:' if you want namespacing\nconst DEFAULT_TTL_MS = 1000 * 60 * 60 * 24 * 7; // 7 days fallback if version is unreachable\n/* =============================================================================\n   BroadcastChannel for cross-tab invalidation\n============================================================================= */ const BC_NAME = 'dash-cache';\nconst hasWindow = \"undefined\" !== 'undefined';\nconst hasBC = hasWindow && 'BroadcastChannel' in window;\nconst bc = hasBC ? new BroadcastChannel(BC_NAME) : null;\nfunction broadcastInvalidate(cacheKey) {\n    bc?.postMessage({\n        type: 'invalidate',\n        cacheKey\n    });\n}\nif (bc) {\n    bc.addEventListener('message', (ev)=>{\n        const msg = ev?.data;\n        if (msg?.type === 'invalidate' && typeof msg?.cacheKey === 'string') {\n            try {\n                if (!hasWindow || !('localStorage' in window)) return;\n                localStorage.removeItem(msg.cacheKey);\n            } catch  {\n            /* ignore */ }\n        }\n    });\n}\n/* =============================================================================\n   localStorage helpers (SSR safe)\n============================================================================= */ function k(key) {\n    return LS_PREFIX + key;\n}\nfunction readCache(key) {\n    try {\n        if (!hasWindow || !('localStorage' in window)) return null;\n        const raw = localStorage.getItem(k(key));\n        if (!raw) return null;\n        return JSON.parse(raw);\n    } catch  {\n        return null;\n    }\n}\nfunction writeCache(key, entry) {\n    try {\n        if (!hasWindow || !('localStorage' in window)) return;\n        localStorage.setItem(k(key), JSON.stringify(entry));\n    } catch  {\n    /* ignore */ }\n}\nfunction clearCache(key) {\n    try {\n        if (!hasWindow || !('localStorage' in window)) return;\n        localStorage.removeItem(k(key));\n        broadcastInvalidate(k(key));\n    } catch  {\n    /* ignore */ }\n}\nfunction peekCache(key) {\n    return readCache(key);\n}\nfunction getLastChangedFromCache(key) {\n    const c = readCache(key);\n    return c?.lastChanged ?? null;\n}\nfunction formatLastChanged(iso) {\n    if (!iso) return '';\n    try {\n        return new Date(iso).toLocaleString();\n    } catch  {\n        return iso;\n    }\n}\n/* =============================================================================\n   HTTP helpers\n============================================================================= */ async function fetchJSON(url, init, signal) {\n    const res = await fetch(url, {\n        ...init,\n        signal,\n        cache: 'no-store',\n        headers: {\n            Accept: 'application/json',\n            ...init?.headers ?? {}\n        }\n    });\n    if (res.status === 304) {\n        // Callers treat 304 as \"use cached\"; we return a compatible shape\n        return {\n            data: undefined,\n            etag: res.headers.get('ETag') ?? undefined\n        };\n    }\n    if (!res.ok) {\n        const text = await res.text().catch(()=>'');\n        throw new Error(`GET ${url} failed: ${res.status} ${text}`);\n    }\n    const etag = res.headers.get('ETag') ?? undefined;\n    const data = await res.json();\n    return {\n        data,\n        etag\n    };\n}\n/* =============================================================================\n   Core: version-gated cache fetch\n============================================================================= */ /**\n * Fetch dashboard data with version guarding:\n *  1) GET versionUrl (sends If-None-Match if we have an ETag)\n *     - if 304 and we have cache → return cache\n *     - if 200, compare lastChanged with cache\n *  2) If changed or no cache → GET dataUrl, cache with new version/etag\n *  3) If version fails, optionally serve bounded-stale cache by TTL\n */ async function getWithVersionCache(cacheKey, dataUrl, versionUrl = DEFAULT_VERSION_URL, signal, opts) {\n    const ttlMs = opts?.ttlMs ?? DEFAULT_TTL_MS;\n    const cached = readCache(cacheKey);\n    // 1) Check /version first (cheap), with ETag for 304 hits\n    const versionInit = {};\n    if (cached?.etag) {\n        versionInit.headers = {\n            ...versionInit.headers || {},\n            'If-None-Match': cached.etag\n        };\n    }\n    try {\n        const vRes = await fetch(versionUrl, {\n            ...versionInit,\n            signal,\n            cache: 'no-store',\n            headers: {\n                ...versionInit.headers || {},\n                Accept: 'application/json'\n            }\n        });\n        if (vRes.status === 304 && cached) {\n            return {\n                data: cached.data,\n                lastChanged: cached.lastChanged\n            };\n        }\n        if (!vRes.ok) {\n            throw new Error(`Version check failed: ${vRes.status}`);\n        }\n        const vEtag = vRes.headers.get('ETag') ?? undefined;\n        const { lastChanged } = await vRes.json();\n        // Version same → serve cache\n        if (cached && cached.lastChanged === lastChanged) {\n            return {\n                data: cached.data,\n                lastChanged: cached.lastChanged\n            };\n        }\n        // 2) Version changed or no cache → fetch fresh data\n        const { data } = await fetchJSON(dataUrl, undefined, signal);\n        const entry = {\n            data,\n            lastChanged,\n            cachedAt: new Date().toISOString(),\n            etag: vEtag\n        };\n        writeCache(cacheKey, entry);\n        return {\n            data,\n            lastChanged\n        };\n    } catch (err) {\n        // 3) If /version fails, serve bounded-stale cache (TTL) if allowed\n        if (cached && opts?.allowStaleOnVersionError !== false) {\n            const age = Date.now() - new Date(cached.cachedAt).getTime();\n            if (age <= ttlMs) {\n                return {\n                    data: cached.data,\n                    lastChanged: cached.lastChanged\n                };\n            }\n        }\n        // As a last resort, fetch data directly (no version guard)\n        if (!signal?.aborted) {\n            const { data } = await fetchJSON(dataUrl, undefined, signal);\n            const nowIso = new Date().toISOString();\n            const entry = {\n                data,\n                lastChanged: cached?.lastChanged ?? nowIso,\n                cachedAt: nowIso,\n                etag: cached?.etag\n            };\n            writeCache(cacheKey, entry);\n            return {\n                data,\n                lastChanged: entry.lastChanged\n            };\n        }\n        throw err;\n    }\n}\n/* =============================================================================\n   Convenience utilities\n============================================================================= */ /** Manually set cache (e.g., after optimistic updates). */ function setCache(cacheKey, data, lastChangedISO, etag) {\n    writeCache(cacheKey, {\n        data,\n        lastChanged: lastChangedISO,\n        cachedAt: new Date().toISOString(),\n        etag\n    });\n    // notify other tabs to drop their local copy so they re-read on next access\n    broadcastInvalidate(k(cacheKey));\n}\n/** Invalidate multiple keys at once. */ function clearMany(keys) {\n    for (const key of keys)clearCache(key);\n}\n/** True if a cached entry exists and matches a given lastChanged value. */ function isCacheVersion(cacheKey, lastChangedISO) {\n    const c = readCache(cacheKey);\n    return !!(c && c.lastChanged === lastChangedISO);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/dataCache.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/dataService.ts":
/*!********************************!*\
  !*** ./src/lib/dataService.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearCache: () => (/* reexport safe */ _dataCache__WEBPACK_IMPORTED_MODULE_0__.clearCache),\n/* harmony export */   clearMany: () => (/* reexport safe */ _dataCache__WEBPACK_IMPORTED_MODULE_0__.clearMany),\n/* harmony export */   fetchCourseWarnings: () => (/* binding */ fetchCourseWarnings),\n/* harmony export */   fetchInDemandJobs: () => (/* binding */ fetchInDemandJobs),\n/* harmony export */   fetchKPIData: () => (/* binding */ fetchKPIData),\n/* harmony export */   fetchMissingSkills: () => (/* binding */ fetchMissingSkills),\n/* harmony export */   fetchMissingSkillsWithCounts: () => (/* binding */ fetchMissingSkillsWithCounts),\n/* harmony export */   fetchMostInDemandSkills: () => (/* binding */ fetchMostInDemandSkills),\n/* harmony export */   fetchTopCourses: () => (/* binding */ fetchTopCourses),\n/* harmony export */   fetchTopMatchingCourses: () => (/* binding */ fetchTopMatchingCourses),\n/* harmony export */   fetchTopSkills: () => (/* binding */ fetchTopSkills),\n/* harmony export */   getCourseWarnings: () => (/* binding */ getCourseWarnings),\n/* harmony export */   getInDemandJobs: () => (/* binding */ getInDemandJobs),\n/* harmony export */   getLastChangedISOFromAnyCache: () => (/* binding */ getLastChangedISOFromAnyCache),\n/* harmony export */   getMissingSkills: () => (/* binding */ getMissingSkills),\n/* harmony export */   getMostInDemandSkills: () => (/* binding */ getMostInDemandSkills),\n/* harmony export */   getRecentlyUpdatedLabel: () => (/* binding */ getRecentlyUpdatedLabel),\n/* harmony export */   getTopCourses: () => (/* binding */ getTopCourses),\n/* harmony export */   getTopMatchingCourses: () => (/* binding */ getTopMatchingCourses),\n/* harmony export */   getTopSkills: () => (/* binding */ getTopSkills),\n/* harmony export */   invalidateAllDashboardCaches: () => (/* binding */ invalidateAllDashboardCaches),\n/* harmony export */   invalidateKpiCache: () => (/* binding */ invalidateKpiCache),\n/* harmony export */   loadMissingSkills: () => (/* binding */ loadMissingSkills),\n/* harmony export */   setCache: () => (/* reexport safe */ _dataCache__WEBPACK_IMPORTED_MODULE_0__.setCache)\n/* harmony export */ });\n/* harmony import */ var _dataCache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataCache */ \"(rsc)/./src/lib/dataCache.ts\");\n// src/lib/dataService.ts\n// TYPES\nconst BASE_URL = \"/api/dashboard\";\nconst VERSION_URL = \"/api/dashboard/version\";\n// 🔗 Version-based cache utilities\n\n// Cache keys per resource (localStorage)\nconst CK = {\n    skills: \"dash:skills\",\n    topCourses: \"dash:top-courses\",\n    jobs: \"dash:jobs\",\n    missingSkills: \"dash:missing-skills\",\n    warnings: \"dash:warnings\",\n    kpi: \"dash:kpi\"\n};\n// Public helpers for the banner\nfunction getLastChangedISOFromAnyCache() {\n    return (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getLastChangedFromCache)(CK.kpi) || (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getLastChangedFromCache)(CK.skills) || (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getLastChangedFromCache)(CK.topCourses) || (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getLastChangedFromCache)(CK.jobs) || (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getLastChangedFromCache)(CK.missingSkills) || (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getLastChangedFromCache)(CK.warnings) || null;\n}\nfunction getRecentlyUpdatedLabel() {\n    const iso = getLastChangedISOFromAnyCache();\n    return iso ? `Recently updated on ${(0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.formatLastChanged)(iso)}` : \"\";\n}\n// Optional: expose invalidation utilities if you want to manually force-refresh from UI\nconst invalidateAllDashboardCaches = ()=>(0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.clearMany)(Object.values(CK));\nconst invalidateKpiCache = ()=>(0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.clearCache)(CK.kpi);\n// ===============================\n// Data fetchers (version-cached)\n// ===============================\n// 1) Most In-Demand Skills\nasync function fetchMostInDemandSkills(signal) {\n    try {\n        const { data } = await (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getWithVersionCache)(CK.skills, `${BASE_URL}/skills`, VERSION_URL, signal);\n        return (data ?? []).filter((s)=>s?.name && s.name.trim() !== \"\").sort((a, b)=>Number(b?.demand ?? 0) - Number(a?.demand ?? 0));\n    } catch (error) {\n        if (error?.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch in-demand skills:\", error);\n        return [];\n    }\n}\n// 2) Top Matching Courses\nasync function fetchTopMatchingCourses(signal) {\n    try {\n        const { data } = await (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getWithVersionCache)(CK.topCourses, `${BASE_URL}/top-courses`, VERSION_URL, signal);\n        return Array.isArray(data) ? data.map((item)=>({\n                courseName: item?.courseName || \"Unknown Course\",\n                courseCode: item?.courseCode || \"N/A\",\n                matchPercentage: Number(item?.matchPercentage) || 0\n            })) : [];\n    } catch (error) {\n        if (error?.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch top courses:\", error);\n        return [];\n    }\n}\n// 3) In-Demand Job Titles (Top 10)\nasync function fetchInDemandJobs(signal) {\n    try {\n        const { data } = await (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getWithVersionCache)(CK.jobs, `${BASE_URL}/jobs`, VERSION_URL, signal);\n        return Array.isArray(data) ? data.filter((item)=>item?.title && String(item.title).trim() !== \"\").sort((a, b)=>Number(b?.demand ?? 0) - Number(a?.demand ?? 0)).slice(0, 10).map((item)=>({\n                title: String(item.title),\n                demand: Number(item.demand) || 0\n            })) : [];\n    } catch (error) {\n        if (error?.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch in-demand jobs:\", error);\n        return [];\n    }\n}\n// 4) Missing Skills (string[] for existing UI)\nasync function fetchMissingSkills(signal) {\n    try {\n        // The API now returns [{ skill, count }, ...] from evaluator output.\n        // But we also support the legacy shapes just in case.\n        const { data } = await (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getWithVersionCache)(CK.missingSkills, `${BASE_URL}/missing-skills`, VERSION_URL, signal);\n        if (!Array.isArray(data)) return [];\n        // New shape: objects with { skill, count }\n        if (data.length > 0 && typeof data[0] === \"object\" && \"skill\" in data[0]) {\n            const arr = data.filter((d)=>d?.skill && typeof d.skill === \"string\").sort((a, b)=>Number(b?.count ?? 0) - Number(a?.count ?? 0)).map((d)=>d.skill.toLowerCase().trim());\n            // de-dup while preserving order\n            const seen = new Set();\n            const out = [];\n            for (const s of arr){\n                if (!seen.has(s)) {\n                    seen.add(s);\n                    out.push(s);\n                }\n            }\n            return out;\n        }\n        // Legacy shapes: array of strings or arrays of strings/CSV\n        const unique = new Set();\n        for (const entry of data){\n            if (Array.isArray(entry)) {\n                entry.map((s)=>String(s)).forEach((s)=>unique.add(s.trim().toLowerCase()));\n            } else if (typeof entry === \"string\") {\n                entry.split(\",\").map((s)=>s.trim().toLowerCase()).filter(Boolean).forEach((s)=>unique.add(s));\n            } else if (entry && typeof entry === \"object\" && \"name\" in entry) {\n                // ultra-legacy: objects like { name: \"python\" }\n                const n = String(entry.name || \"\").trim().toLowerCase();\n                if (n) unique.add(n);\n            }\n        }\n        return Array.from(unique).sort();\n    } catch (error) {\n        if (error?.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch missing skills:\", error);\n        return [];\n    }\n}\n// Optional: Missing skills WITH counts (useful for richer UI)\nasync function fetchMissingSkillsWithCounts(signal) {\n    try {\n        const { data } = await (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getWithVersionCache)(CK.missingSkills, `${BASE_URL}/missing-skills`, VERSION_URL, signal);\n        if (!Array.isArray(data)) return [];\n        if (data.length > 0 && typeof data[0] === \"object\" && \"skill\" in data[0]) {\n            // Preferred new shape\n            return data.filter((d)=>d?.skill).map((d)=>({\n                    skill: String(d.skill),\n                    count: Number(d.count) || 0\n                })).sort((a, b)=>b.count - a.count);\n        }\n        // Fallback: derive counts from legacy formats (count = 1 per occurrence)\n        const counts = new Map();\n        for (const entry of data){\n            const push = (v)=>{\n                const key = v.trim().toLowerCase();\n                if (!key) return;\n                counts.set(key, (counts.get(key) ?? 0) + 1);\n            };\n            if (Array.isArray(entry)) {\n                entry.forEach((s)=>push(String(s)));\n            } else if (typeof entry === \"string\") {\n                entry.split(\",\").forEach((s)=>push(s));\n            } else if (entry && typeof entry === \"object\" && \"name\" in entry) {\n                push(String(entry.name || \"\"));\n            }\n        }\n        return Array.from(counts.entries()).map(([skill, count])=>({\n                skill,\n                count\n            })).sort((a, b)=>b.count - a.count);\n    } catch (error) {\n        if (error?.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch missing skills (with counts):\", error);\n        return [];\n    }\n}\n// 5) Course Warnings\nasync function fetchCourseWarnings(signal) {\n    try {\n        const { data } = await (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getWithVersionCache)(CK.warnings, `${BASE_URL}/warnings`, VERSION_URL, signal);\n        return Array.isArray(data) ? data.map((item)=>({\n                courseName: item?.courseName || \"Unknown Course\",\n                courseCode: item?.courseCode || \"N/A\",\n                matchPercentage: Number(item?.matchPercentage) || 0\n            })) : [];\n    } catch (error) {\n        if (error?.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch course warnings:\", error);\n        return [];\n    }\n}\n// 6) KPI Data\nasync function fetchKPIData(signal) {\n    try {\n        const { data } = await (0,_dataCache__WEBPACK_IMPORTED_MODULE_0__.getWithVersionCache)(CK.kpi, `${BASE_URL}/kpi`, VERSION_URL, signal);\n        return {\n            averageAlignmentScore: Number(data?.averageAlignmentScore) || 0,\n            totalSubjectsAnalyzed: Number(data?.totalSubjectsAnalyzed) || 0,\n            totalJobPostsAnalyzed: Number(data?.totalJobPostsAnalyzed) || 0,\n            skillsExtracted: Number(data?.skillsExtracted) || 0\n        };\n    } catch (error) {\n        if (error?.name === \"AbortError\") {\n            return {\n                averageAlignmentScore: 0,\n                totalSubjectsAnalyzed: 0,\n                totalJobPostsAnalyzed: 0,\n                skillsExtracted: 0\n            };\n        }\n        console.error(\"❌ FastAPI KPI fetch failed:\", error);\n        return {\n            averageAlignmentScore: 0,\n            totalSubjectsAnalyzed: 0,\n            totalJobPostsAnalyzed: 0,\n            skillsExtracted: 0\n        };\n    }\n}\n// ===============================\n// Alias Exports (for container compatibility)\n// ===============================\n// Skills\nconst getMostInDemandSkills = fetchMostInDemandSkills;\nconst getTopSkills = fetchMostInDemandSkills;\nconst fetchTopSkills = fetchMostInDemandSkills;\n// Top courses table\nconst getTopMatchingCourses = fetchTopMatchingCourses;\nconst getTopCourses = fetchTopMatchingCourses;\nconst fetchTopCourses = fetchTopMatchingCourses;\n// In-demand jobs\nconst getInDemandJobs = fetchInDemandJobs;\n// Missing skills list\nconst getMissingSkills = fetchMissingSkills;\nconst loadMissingSkills = fetchMissingSkills;\n// Course warnings\nconst getCourseWarnings = fetchCourseWarnings;\n// Optional re-exports if needed elsewhere\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/dataService.ts\n");

/***/ })

};
;