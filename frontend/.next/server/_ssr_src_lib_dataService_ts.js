"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_dataService_ts";
exports.ids = ["_ssr_src_lib_dataService_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/dataService.ts":
/*!********************************!*\
  !*** ./src/lib/dataService.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchCourseWarnings: () => (/* binding */ fetchCourseWarnings),\n/* harmony export */   fetchInDemandJobs: () => (/* binding */ fetchInDemandJobs),\n/* harmony export */   fetchKPIData: () => (/* binding */ fetchKPIData),\n/* harmony export */   fetchMissingSkills: () => (/* binding */ fetchMissingSkills),\n/* harmony export */   fetchMostInDemandSkills: () => (/* binding */ fetchMostInDemandSkills),\n/* harmony export */   fetchTopCourses: () => (/* binding */ fetchTopCourses),\n/* harmony export */   fetchTopMatchingCourses: () => (/* binding */ fetchTopMatchingCourses),\n/* harmony export */   fetchTopSkills: () => (/* binding */ fetchTopSkills),\n/* harmony export */   getCourseWarnings: () => (/* binding */ getCourseWarnings),\n/* harmony export */   getInDemandJobs: () => (/* binding */ getInDemandJobs),\n/* harmony export */   getMissingSkills: () => (/* binding */ getMissingSkills),\n/* harmony export */   getMostInDemandSkills: () => (/* binding */ getMostInDemandSkills),\n/* harmony export */   getTopCourses: () => (/* binding */ getTopCourses),\n/* harmony export */   getTopMatchingCourses: () => (/* binding */ getTopMatchingCourses),\n/* harmony export */   getTopSkills: () => (/* binding */ getTopSkills),\n/* harmony export */   loadMissingSkills: () => (/* binding */ loadMissingSkills)\n/* harmony export */ });\n// lib/dataService.ts\n// === TYPES ===\nconst BASE_URL = \"/api/dashboard\";\n// ---- Shared fetcher with retry + AbortSignal ----\nasync function fetchJSON(url, init, signal, retries = 3, retryDelay = 300) {\n    for(let attempt = 1; attempt <= retries; attempt++){\n        try {\n            const res = await fetch(url, {\n                ...init,\n                signal,\n                cache: \"no-store\",\n                headers: {\n                    ...init?.headers ?? {},\n                    Accept: \"application/json\"\n                }\n            });\n            if (!res.ok) {\n                const text = await res.text().catch(()=>\"\");\n                throw new Error(`GET ${url} failed: ${res.status} ${text}`);\n            }\n            return res.json();\n        } catch (error) {\n            if (error.name === \"AbortError\") throw error;\n            if (attempt === retries) throw error;\n            await new Promise((res)=>setTimeout(res, retryDelay));\n        }\n    }\n    throw new Error(`Failed to fetch ${url}`);\n}\n// === 1. Most In-Demand Skills ===\nasync function fetchMostInDemandSkills(signal) {\n    try {\n        const rawSkills = await fetchJSON(`${BASE_URL}/skills`, undefined, signal);\n        return (rawSkills ?? []).filter((s)=>s?.name && s.name.trim() !== \"\").sort((a, b)=>Number(b?.demand ?? 0) - Number(a?.demand ?? 0));\n    } catch (error) {\n        if (error.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch in-demand skills:\", error);\n        return [];\n    }\n}\n// === 2. Top Matching Courses ===\nasync function fetchTopMatchingCourses(signal) {\n    try {\n        const data = await fetchJSON(`${BASE_URL}/top-courses`, undefined, signal);\n        return Array.isArray(data) ? data.map((item)=>({\n                courseName: item?.courseName || \"Unknown Course\",\n                courseCode: item?.courseCode || \"N/A\",\n                matchPercentage: Number(item?.matchPercentage) || 0\n            })) : [];\n    } catch (error) {\n        if (error.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch top courses:\", error);\n        return [];\n    }\n}\n// === 3. In-Demand Job Titles (Top 10) ===\nasync function fetchInDemandJobs(signal) {\n    try {\n        const data = await fetchJSON(`${BASE_URL}/jobs`, undefined, signal);\n        return Array.isArray(data) ? data.filter((item)=>item?.title && String(item.title).trim() !== \"\").sort((a, b)=>Number(b?.demand ?? 0) - Number(a?.demand ?? 0)).slice(0, 10).map((item)=>({\n                title: String(item.title),\n                demand: Number(item.demand) || 0\n            })) : [];\n    } catch (error) {\n        if (error.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch in-demand jobs:\", error);\n        return [];\n    }\n}\n// === 4. Missing Skills ===\nasync function fetchMissingSkills(signal) {\n    try {\n        const rawSkills = await fetchJSON(`${BASE_URL}/missing-skills`, undefined, signal);\n        const unique = new Set();\n        for (const entry of rawSkills ?? []){\n            if (Array.isArray(entry)) {\n                entry.map((s)=>String(s)).forEach((s)=>unique.add(s.trim().toLowerCase()));\n            } else if (typeof entry === \"string\") {\n                entry.split(\",\").map((s)=>s.trim().toLowerCase()).filter(Boolean).forEach((s)=>unique.add(s));\n            }\n        }\n        return Array.from(unique).sort();\n    } catch (error) {\n        if (error.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch missing skills:\", error);\n        return [];\n    }\n}\n// === 5. Course Warnings ===\nasync function fetchCourseWarnings(signal) {\n    try {\n        const data = await fetchJSON(`${BASE_URL}/warnings`, undefined, signal);\n        return Array.isArray(data) ? data.map((item)=>({\n                courseName: item?.courseName || \"Unknown Course\",\n                courseCode: item?.courseCode || \"N/A\",\n                matchPercentage: Number(item?.matchPercentage) || 0\n            })) : [];\n    } catch (error) {\n        if (error.name === \"AbortError\") return [];\n        console.error(\"❌ Failed to fetch course warnings:\", error);\n        return [];\n    }\n}\n// === 6. KPI Data ===\nasync function fetchKPIData(signal) {\n    try {\n        const data = await fetchJSON(`${BASE_URL}/kpi`, undefined, signal);\n        return {\n            averageAlignmentScore: Number(data?.averageAlignmentScore) || 0,\n            totalSubjectsAnalyzed: Number(data?.totalSubjectsAnalyzed) || 0,\n            totalJobPostsAnalyzed: Number(data?.totalJobPostsAnalyzed) || 0,\n            skillsExtracted: Number(data?.skillsExtracted) || 0\n        };\n    } catch (error) {\n        if (error.name === \"AbortError\") {\n            return {\n                averageAlignmentScore: 0,\n                totalSubjectsAnalyzed: 0,\n                totalJobPostsAnalyzed: 0,\n                skillsExtracted: 0\n            };\n        }\n        console.error(\"❌ FastAPI KPI fetch failed:\", error);\n        return {\n            averageAlignmentScore: 0,\n            totalSubjectsAnalyzed: 0,\n            totalJobPostsAnalyzed: 0,\n            skillsExtracted: 0\n        };\n    }\n}\n// ================= Alias Exports (for container compatibility) =============\n// Skills (bar chart)\nconst getMostInDemandSkills = fetchMostInDemandSkills;\nconst getTopSkills = fetchMostInDemandSkills;\nconst fetchTopSkills = fetchMostInDemandSkills;\n// Top courses table\nconst getTopMatchingCourses = fetchTopMatchingCourses;\nconst getTopCourses = fetchTopMatchingCourses;\nconst fetchTopCourses = fetchTopMatchingCourses;\n// In-demand jobs (pie)\nconst getInDemandJobs = fetchInDemandJobs;\n// Missing skills list\nconst getMissingSkills = fetchMissingSkills;\nconst loadMissingSkills = fetchMissingSkills;\n// Course warnings\nconst getCourseWarnings = fetchCourseWarnings;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/dataService.ts\n");

/***/ })

};
;